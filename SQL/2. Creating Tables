Creating Tables:
------------------------------------------------------------------------------------------------
When creating tables, try to abstract everything to make it simple

For example: we are creating a store database.
Tables would include : 
	-Customers
	-Stores
	-Suppliers
	-Orders
	-Items, 
	-etc...

Tables have attrbutes
	EXAMPLE: a customer has attributes id, name, address, email, phone

attributes can be repeated in different tables
	EXAMPLE: customer has a name and supplier has a name but they dont correlate

Always create entities first then create the relationships between the entities  
Each entity is a table of attributes
------------------------------------------------------------------------------------------------
The relationship between entities should always be one to many and many to one
Example: one customer can have many orders but each one of those orders belongs to one customer

You cannot have many to many relationships. ALWYAS break it down to two one to many relations
When you break it down, there should be three tables (the two originals and the middleman table)
Take the primary key from each table and use both as a composite primary key for the middleman table
You will either start from the very right or very left, go to the middleman table then return to the oppsoite side.


EXAMPLE 1: 
	-One car can have multiple colors but each color can belong to many cars (one table called cars, other table called colors)
	-Introduce the middle man table, called car_color that uses car_id and color_id as attributes.
	-Each are foreign keys and together are the primary key for that 3rd table

	-For SQL: Theres an outer query and an inner query. Evaluate the inner query to use for the outer query. (The subquery is the middleman)
	-TO SELECT ALL CARS THAT ARE YELLOW (ex: yellow's id = 7): 
	select * from cars where car_id in (select car_id from car_color where color_id = 7;

	-TO SELECT ALL COLORS THAT COME IN A SPECIFIC CAR (ex: niassan rouge's id is NISSAN176): 
	select * from colors where color_id in(select color_id from car_colors where car_id = NISSAN176);


EXAMPLE 2:
	-one student can enroll in many classes and each class can have multiple students
	-introduce a third relationship, you can call it enroll
	-one student can enroll many times but each enrollment is by one student (1:M)
	-and each enrollment is to one course but each course has many enrollments (1:M)


EXAMPLE 3: 
	-one supplier ships to multiple stores and each store has multiple suppliers 
	-introduce a third entity to act as a middleman; lets call it shipment 
	-each supplier has multiple shipments but each shipment belongs to one supplier
	-and store has multiple shipments but each shipment belongs to one store 

------------------------------------------------------------------------------------------------
When building tables for one to many relationships:
The table that holds the 'many' side of the relation will need to reference the id of the 'one' side of the relationship

EXAMPLE:
	-each customer has multiple orders and each order belongs to one customer so when creating the table:
	-the orders table (which is a table of all the orders by any customer) has to have the customer id to which that order belongs to
	-so if the customer is being referenced by id, the order table has to have an attribute coloumn for customer_id (the foreign key)
	-DO NOT place order id in the customers table

OTHER EXAMPLE: 
	-one supplier has many items and each item has one supplier so when creating the table
	-reference supplier_id inside the items table as a foreign key 


EXAMPLES OF POORT DATABASE DESIGN:
	-empty fields
	-data redundancy
	-different names for the same thing (attributes named m_name and middle_name)
	-attributes combined into the same coloumn (EX: full name or an entire address rather than first name, last name, address, state, city, zip code)
------------------------------------------------------------------------------------------------
CREATING A TABLE FROM ANOTHER TABLE:

create a table called pricelist using the coloumns p_code, p_descript and p_price from the product table
	EX: create table priceList as select p_code, p_descript, p_price from product
	
you can also change the name of one of the coloums, also using as (the first as is different from second as)
	EX: create table priceList as select p_code, p_descript as p_description, p_price from product


INSERTING VARIABLES FROM ONE TABLE TO ANOTHER ALREADY CREATED TABLE
	EX: INSERT INTO plist SELECT p_code, p_price from priceList WHERE p_price < 50;
------------------------------------------------------------------------------------------------