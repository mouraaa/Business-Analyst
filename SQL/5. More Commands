Postgres DB Notes:
------------------------------------------------------------------------------------------------
MORE COMMANDS: (THESE ARE IN THE POSTGRE DATABASE)

1: select id,id,id from t1        -->   shows id three times

2: #select the id and modify it and add it in a new attribute (so multiplying whatever is in id by 2 in a new attribute called times2, etc.)
select id, id*2 as times2, id*3 as times3 from t1 

3: #just adds a new attribute in the result table, but not in the original table so if you do select * from t1; it will return to id, name
select id^2 as sqr from t1


4: #just changes the name of the attribute in the query, but not in the actual table so if you do select * from t1; it will return to id, name
select id as student_id, name as name_of_student from t1 


5: #shows all the attributes are in a table 
select column_name from information_schema.columns where table_name = ‘class’  

6: #Another way of searching for multiple rows (Jerry would not appear in the results since hes not in the table)
select * from customer where customer_name IN ('Bob','Mike','Kelsey','Jerry');

7: select * from agent where not agent_id = 12 or agent_id = 17;

8: select * from agent where agent_name is NULL; #CHECK IF NULL/NOT NULL

9: #shows if a customer is also an agent
#E and M are nicknames because you are joining the same table twice, so to remove ambiguity, rename each table
select E.customer_name, M.customer_id from customer E JOIN customer M ON E.customer_id = M.agent_id;

------------------------------------------------------------------------------------------------

\l                 --> means list all the databases in your server
\c db_name         --> basically means change to db_name (change from database to database)
\dt      		   --> shows all the tables in a database

<>                 --> means does not equal
or not             --> means <> (does not equal)
ON 				   --> means if (ONLY USE ON WHEN JOINING TABLES)


------------------------------------------------------------------------------------------------
JOINING TABLES: (THESE ARE IN THE LECTURE DB)

#JOIN means cartesian product. JOIN needs an on ON statement
select * from customer JOIN agent ON customer_name = agent_name (shows you from both tables where customer_name = agent_name)
select * from customer JOIN agent ON customer_name <> agent_name 

CORSS JOIN = cartesian product (no ON statement needed)
select * from customer CROSS JOIN agent;


#LEFT/RIGHT joins need an ON statement (use the foreign key from 1st table = primary key of 2nd table)
#shows you the entire customer table and any agent that is linked to each customer
select * from customer LEFT JOIN agent ON customer.agent_id = agent.agent_id;

#shows you the entire agent table and any customer linked to each agent (if an agent helped multiple customers, that agent will have multiple rows for each customer helped)
select * from customer RIGHT JOIN agent ON customer.agent_id = agent.agent_id;

#uses natural join based on a specific attribute
select * from customer JOIN agent USING(agent_id);

#UNION (shows everything that is in t1 and t2)
select * from t1 union select * from t2;

#INTERSECT (shows everything that is in t1 and t2)
select * from t1 intersect select * from t2;

#EXCEPT (shows everything in t1 that isnt in t2)
select * from T1 except select * from T2;
------------------------------------------------------------------------------------------------