COMMANDS:
------------------------------------------------------------------------------------------------
create database
	EX:  create database lab1

create table    	  
	EX1: create table t1(id int, name varchar(10)) 
		-string isnt a thing in database, must use varchar() with the number of characters you wish to allow

	EX2: create table customer(customer_id INT NOT NULL, customer_name varchar(255) NOT NULL, total_price REAL NOT NULL, PRIMARY KEY(customer_id)) 
		-REAL = DOUBLE IN SQL

insert into       	
	EX:  insert into table_name(id,name) values (3124, 'Adam') 
		-single quotes are used because name is varchar

------------------------------------------------------------------------------------------------
use
	identifies the schema/database you will be selecting data from
	EX: USE mavenmovies;

select ... from  	  
	EX:  select name from t1 where id = 3 

select * from table_name        
	-shows everything in the table
	-great way to quickly see what data a table contains
	-might take a long time to load if the data is huge

------------------------------------------------------------------------------------------------
delete from
	EX:  delete from t1 where id = 3
	EX2: delete from t1 
		-clears all rows in the table

drop table                     
	-drops the entire table											

------------------------------------------------------------------------------------------------
distinct						
	-shows only distinct values, no replicas
	-note that using distinct wont return them in ascending order
	-to order the distinct values in ascending order, you must use "ORDER BY ASC"
	-if you include multiple columns, your result will return all distinct COMBINATIONS of values across those columns
	EX: select distinct name from t1 order by name asc

unique 							
    only accepts unique entrys for that specific variable
	EX: if you try to add the same variable, itll give you an error			
------------------------------------------------------------------------------------------------
primary key
    -makes a variable into primary key 
	-EX: create table vendor(v_code integer not null unique, v_name varchar(35) not null, primary key(v_code));																																		

foreign key 	
	-makes a variable into foreign key 		
	-EX: create table product(p_code integer not null unique, p_name varchar(35) not null, foreign key(p_code));																																															
------------------------------------------------------------------------------------------------
check 				
	-a constraint to check if the value entered into the table can be entered based on the condition 
	-EX: create table discounts(discount float not null CHECK(discount >= 0 and discount <= 100))
	-checks if discount is within 0 to 100, if not, an error rises

------------------------------------------------------------------------------------------------
count 		
	shows how many rows in a table
	skips null except count *
	
	EX1: select count(*) from customer
		shows the amount of rows from customer

	EX2: select count(customer_name) from customer where customer_id between 10 and 20;

	EX3: select count(distinct customer_name) from customer;

	EX4: select rating, count(rating) from film GROUP BY rating;
		shows the count of all films in each rating (PG, PG-13, R, etc)
------------------------------------------------------------------------------------------------
and                              
	select * from customer where customer_id = 11 and customer_name = 'Bob';

or                              
	select * from customer where customer_id = 11 or customer_name = 'Bob';

in / not in
	-checks if something is in/not in a list
	-this is a much better option than 'or' if theres multiple or conditions
	-EX1 : select * from payments where customer_id = 42 or customer_id = 43 or customer_id = 56 or customer_id = 63 or customer_id = 87 becomes
		select * from payments where customer_id IN (43,56,63,87)

	-EX2: select * from invoice where item_desc in (select item_desc from invoice where customer_id = 10);
		 select everything bought by customer 10 and anyone who bought the same item(s) as 10															

between 						
	-between is inclusive so it will include in the below example 11 and 22
	-EX: select * from customer where customer_id between 11 and 22;
	-NOTE: dont use between for dates or at the very least, cast the datetime to dates.
	-READ: https://stackoverflow.com/questions/16347649/sql-between-not-inclusive

where / where not
	-returns anything that is / is not 
	-must have parenthesis if multiple conditions
	-EX1: select * from customer where (customer_id = 17 or customer_name = 'Bob')
	-EX2: select * from customer where not (customer_id = 17 or customer_name = 'Bob')
------------------------------------------------------------------------------------------------
Aliases:

as: 
	-allows you to assign a custom name to a field in the result set
	-makes queires more human readable
	-works best when you want to do an aggragate function so instead of a column saying count(film_id), you can name it count_of_films
	-doesnt change the actual values, just the column name
	-EX: select rental_duration, count(film_id) as count_of_films from film group by rental_duration

------------------------------------------------------------------------------------------------
Pattern Matching:

%                               
	any number of characters 

_ 
	represents only one character

like / not like							
	looks for a pattern
	like includes a certain pattern
	not like filters out/excludes a certain pattern
	
	EX1: select * from customer where customer_name LIKE '_an_'; 
		returns any customer whose name has 4 characters and has 'a' as the second char and 'n' as the third char
		the _ represents only one character, unlike the % which represents any number of characters
	
	EX2: select * from customer where customer_name LIKE 'J%'; 
		returns any customer whose name starts with 'J'

	EX3: select * from customer where customer_name LIKE '_a%'; 
		returns any customer whose name you dont know what char starts with, but has 'a' as the second char and if any characters afterwards

NOTE: capitalization matters in pattern matching. If youre searching for Denise% and the actual value in the table is denise%, it wouldnt return that value
------------------------------------------------------------------------------------------------
having 							
	use this term instead of where for conditions when using GROUP BY
	EX: select customer_id, count(price) from invoice GROUP BY customer_id HAVING customer_id > 10;			
		shows the customer_id and how many products that customer bought but only if customer_id > 10																

ALL 							
    EX: select * from invoice where price > ALL (select price from invoice where customer_id = 10);
		select all from invoice where the price is greater than all the prices of customer_id = 10


ANY 				
	select * from invoice where price > ANY (select price from invoice where customer_id = 15);
		select all from invoice where the price is greater than any the prices of customer_id = 10

------------------------------------------------------------------------------------------------
UPPER() 						
	returns the uppercase value
	EX: select upper(customer_name) from customer; 

LOWER() 						
	returns the lowercase value
    EX: select lower(customer_name) from customer; 

MIN() 							
	returns the minimum value
	skips null values
	EX: select min(customer_id) from customer; 

MAX() 							
	returns the maximum value
	skips null values
	EX: select max(customer_id) from customer; 

AVG() 							
   returns the average value
   skips null values
   EX: select avg(customer_id) from customer

SUM()
   basically use sum to sum up all the coloumns and return one answer
   treats null values as 0
   EX: Select sum(customer_id) from customer; 

::int
	Converts into an int
	EX: select sum(price*qty)::int  from revenue;

------------------------------------------------------------------------------------------------
DATE/TIME: (you can use these instead of manually creating date/time attributes)

select CURRENT_DATE				-->   shows the current date
select CURRENT_TIME        	    -->   shows the current date
select NOW()					-->   shows the current date

values(CURRENT_DATE) 			-->   shows the current date
values(CURRENT_TIME)			-->   shows the current time
values(NOW()) 					-->   shows the current date and time

create table date(date date) 
	the first date is attribute name and second date is keyword date

insert into t1(date) values (current_date)

------------------------------------------------------------------------------------------------
Show metadata about the table: 

EX: select column_name, data_type, character_maximum_length FROM information_schema.columns where table_name = 'pricelist';
	name of data table HAS to be lowercase or else itll show nothing

ALTER THE METADATA 
examples: you want to add an extra column, drop a column, change varchar from 30 to 40, or you forgot to create one of the variables as primary key)

	EX1: ALTER TABLE pricelist ALTER p_descript TYPE  VARCHAR(40);   
	EX2: ALTER TABLE pricelist ADD p_qty int;
	EX3: ALTER TABLE priceList DROP column p_qty
	EX4: ALTER TABLE pricelist ADD PRIMARY KEY(p_code);

UPDATING ROW INFO
	EX: UPDATE pricelist SET p_descript = 'graphic tshirt', p_price = 45 where p_code = 100;

ALTER VS UPDATE:
	ALTER changes metadata (column_name, data_type, character_maximum_length, primary key, etc)
	UPDATE: changes actual data inside the table
------------------------------------------------------------------------------------------------
CREATE VIEWS: 

lets say you use the same query everyday and the query is super long, just create a view of that query and instead write "select * from view_name"

EX: CREATE VIEW stats AS SELECT * FROM priceList WHERE p_price < 100;

now we have a table with the query "SELECT * FROM priceList WHERE p_price < 100)"
now writing "SELECT * FROM stats" is much easier to write than the original query
usually the query is much longer than the provided example so you would use a view
------------------------------------------------------------------------------------------------