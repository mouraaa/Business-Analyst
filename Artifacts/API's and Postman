API's and Postman
——————————————————————————————————————————
API: Application Programming Interfaces

An API acts as the middleman between an application and web server that want to connect with each other to share information. They are a set of rules that specifies how two software programs should interact with each other. An API defines the kinds of calls or requests that can be made, how to make them, the data formats that should be used, the conventions to follow, etc. 

API's are used to make a request to a resource on a server and the server responds with the requested information. The protocol used to transport the data is HTTP. (unless its an API only used to connect on the same computer)

There are different types of API's.
	1. Web API's can autoamtically convert request and response data into various formats (ie: JSON, XML, BSON, etc)
	2. REST API's stands for Representational State Transfer. They can only support JSON data format.
	3. many more i will not list
——————————————————————————————————————————
API Keys & Authentification:

An API key is used to identify an application or user and is used for authentication in computer applications. 

Almost every API has a method in place to authenticate requests. You usually have to provide an API key in your requests to get a response. 

API Authentication makes a user's account more secure by adding that additional layer of authentication. Thus, making it harder for cybercriminals to access a user's private information. A website that uses API authentication, creates a sense of security for users and wins their trust.
——————————————————————————————————————————
Using Postman:

Depending on the API, you might need to enter the API key in the paramater or URL section.
——————————————————————————————————————————
Paramaters: 

paramters:
 - name:
   in: (this is where you specify the paramter type)

Path parameters 
	-appears before the ‘?’ in the URL
	-separated by '/'
	-identifies a specific resource or collection of resources. similar to folders and subfolders in a library - guiding you to the exact book you want
	-ex: /products/shoes/sneakers identifies the category of "sneakers" within the "shoes" section of the "products" resource.
	-generally/most of the time requried
	-you can add this to the link via ':name_you_want_to_give' and have the key the same name as name_you_want_to_give and provide the value you want 

Query parameters:
	-appear after the ‘?’ in the URL 
	-separated by ampersands (&)
	-order of the paramters dont matter
	-modifies or filters the identified resource. Think of them like search filters that refine the content within a folder.
	-ex: /products/shoes/sneakers?size=10&color=blue filters the "sneakers" resource to show only shoes in size 10 and the color blue.
	-generally/most of the time they are optional
	-when you add parameters, they append at the end of the query string in the endpoint URL
	-you can also enter the params straight into the URL. If you enter them straight in the URL, they will append in the param section.

——————————————————————————————————————————
Data Types: https://swagger.io/docs/specification/data-models/data-types/

schema: 
  type: (this is where you specofy the data type)

the data type of a schema can be one of the below:
	1. string
	2. number (can be used for integers or floating numbers ie numbers with decimals)
	3. integer
	4. boolean
	5. array
	6 object