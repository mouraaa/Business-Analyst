User Stories:
——————————————————————————————————————————
User story: a general explanation of a feature written from the perspective of the end user or customer
	The purpose of a user story is to articulate how a piece of work will deliver value back to the customer

How to write: "As a [who], I want [what] so that [why]"
	- the 'who' should not just be a job title. We're after the persona of that person.
	- the 'what' should be implementation/feature specific free. Shouldnt be desribing the UI. Should focus what the overall what.
——————————————————————————————————————————
User stories should follow the acronym INVEST

Independent:
	-a user story should not depend on other user stories. 
	-otherwise, it risks becoming a blocker for other features.
	-can be prioritized and worked on independently.

Negotiable:
	-user stories should be written in a way that leaves room for negotiation. 
	-they should not be too specific or too detailed. 
	-allows for flexibility and allows the team to add their own insights during implementation.

Valuable:
	-a user story should always represent value for the user. It should be something that the user wants or needs.

Estimable:
	-user stories should be small enough that they can be estimated. 
	-if a user story is too big, it should be broken down into smaller user stories.

Sized-Appropriately:
	-user stories should be the right size. 
	-they should not be too big or too small. 
	-the team should have a good understanding of what the user story is and what it entails before starting work on it.

Testable:
	-user stories should be testable. 
	-must be quantifiable and verifiable. 
	-cant be "make something prettier or more user-friendly", because there is no way to measure something’s attractiveness or user-friendliness. 
	-needs to be written in "true/false" or "pass/fail" 

——————————————————————————————————————————
Acceptance Crtieria:

	-should answer the what, not how.
	-should state the intent, but not the solution
	-should be implementation/solution free (ex: cant have click a button to ...)
——————————————————————————————————————————
Rule Based AC:

Let’s say you are working on a system allowing users to create and customize their products. One of the system’s features is the ability for users to choose colors for the product. To ensure that the system works properly, you might create a set of rule-based criteria that looks something like this:

	-The color palette should only display colors available to customize a particular product.
	-The system should prevent users from choosing the same colors for different product parts.
	-The system should prevent users from choosing clashing colors (e.g., light font color on a light background).
	-Users should be able to preview the product with their selected colors before finalizing their customization.
	-The system should store the chosen colors and apply them correctly to the final product.
——————————————————————————————————————————
Scenario Based AC:

Let’s say you are working on an e-commerce project allowing users to purchase online. One of the system’s main features is the ability for users to add products to their cart and then check out. To ensure that the system works properly, you might create a set of scenario-based acceptance criteria that looks something like this:

User adds product to cart
	-product should be added to the users cart and the cart should display the correct price and quantity.

User cancels checkout
	-the system should return the user to their cart with the correct product and quantities
——————————————————————————————————————————